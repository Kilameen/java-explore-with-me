{
	"info": {
		"_postman_id": "73f49395-7882-406a-8806-f6f49e2b0fa9",
		"name": "Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44101787",
		"_collection_link": "https://www.postman.com/red-capsule-798716/my-workspace/collection/kgnsbxi/feature?action=share&source=collection_link&creator=44101787"
	},
	"item": [
		{
			"name": "Создание подписки на пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Проверяем что ответ пришел в виде json\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// Дополнительные проверки тела ответа\r",
							"pm.test(\"Response has id\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property(\"id\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const api = new API(pm);\r",
							"const rnd = new RandomUtils();\r",
							"\r",
							"const main = async () => {\r",
							"    try {\r",
							"        const followerUser = await api.addUser(rnd.getUser());\r",
							"        const ownerUser = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(followerUser.id, rnd.getEvent(category.id));\r",
							"\r",
							"        m.environment.set(\"userId\", pm.collectionVariables.get(\"uid\"));\r",
							"        m.environment.set(\"ownerId\", pm.collectionVariables.get(\"ownerId\"));\r",
							"        \r",
							"        let ownerId = pm.environment.get(\"ownerId\");\r",
							"\r",
							"        if (!ownerId) {\r",
							"         console.warn(\"Внимание: ownerId не задан. Используем значение по умолчанию.\");\r",
							"         ownerId = \"1\";\r",
							"        pm.environment.set(\"ownerId\", ownerId);\r",
							"}\r",
							"        console.log(\"Созданы тестовые данные:\", { followerUser, ownerUser, category, event });\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных\", err);\r",
							"    }\r",
							"\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await main();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"ownerId\": 1}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/subscriptions",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"subscriptions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех подписчиков пользователя",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Отписка от пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Pre-request Script: Подготовка к запросу, получение и проверка данных.\r",
							"\r",
							"// 1. Получение и логирование userId из переменных коллекции.\r",
							"//    Важно убедиться, что userId задан и доступен.\r",
							"console.log(\"userId из коллекции:\", pm.collectionVariables.get(\"uid\"));\r",
							"const userId = pm.collectionVariables.get(\"userId\");\r",
							"pm.environment.set(\"userId\", userId); // Сохраняем в переменные окружения.\r",
							"\r",
							"// 2. Получение и логирование ownerId из переменных коллекции.\r",
							"//    Также проверяем наличие ownerId и сохраняем в окружение.\r",
							"console.log(\"ownerId из коллекции:\", pm.collectionVariables.get(\"ownerId\"));\r",
							"const ownerId = pm.collectionVariables.get(\"ownerId\");\r",
							"pm.environment.set(\"ownerId\", ownerId); // Сохраняем ownerId в переменные окружения.\r",
							"\r",
							"// 3. Валидация ownerId.  Если ownerId не задан, устанавливаем значение по умолчанию (для тестов!).\r",
							"//    В реальном коде так делать не стоит, лучше завершить выполнение теста с ошибкой.\r",
							"let requestOwnerId = pm.environment.get(\"ownerId\");\r",
							"console.log(\"ownerId из окружения:\", requestOwnerId);\r",
							"if (!requestOwnerId) {\r",
							"    console.warn(\"Внимание: ownerId не задан. Устанавливаем значение по умолчанию для тестов.\");\r",
							"    requestOwnerId = \"1\"; // Замените на подходящий ID для ваших тестов.\r",
							"    pm.environment.set(\"ownerId\", requestOwnerId);\r",
							"}\r",
							"\r",
							"// 4. Формирование тела запроса (request body) в формате JSON.\r",
							"//    Передаем ownerId в теле запроса.\r",
							"const requestBody = {\r",
							"    ownerId: requestOwnerId\r",
							"};\r",
							"\r",
							"pm.request.body.update({\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify(requestBody),\r",
							"    options: { raw: { language: 'json' } }\r",
							"});\r",
							"\r",
							"// 5. Логирование тела запроса.  Полезно для отладки и проверки отправляемых данных.\r",
							"console.log(\"Тело запроса:\", pm.request.body.raw);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Расширенные тесты для проверки логики отписки, основанные на предоставленном коде.\r",
							"// Учитываем возможные статусы и сценарии.\r",
							"\r",
							"// 1. Проверяем успешный статус и формат.  Статус 200 предполагает успешную отписку.\r",
							"pm.test(\"Успешный статус 200 и формат JSON\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// 2. Проверяем структуру ответа. Убеждаемся, что ответ содержит ожидаемые поля.\r",
							"pm.test(\"Проверка структуры ответа\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.all.keys(\"id\", \"followerId\", \"owner\",\"subscribeTime\", \"unsubscribeTime\",\"friendshipsStatus\");\r",
							"});\r",
							"\r",
							"// 3. Проверяем, что friendshipsStatus корректно обновлен после отписки.\r",
							"pm.test(\"Статус подписки после отписки корректен\", function () {\r",
							"    const response = pm.response.json();\r",
							"    // Учитываем возможные переходы статусов: из MUTUAL в NO_FRIENDSHIP, из ONE_SIDED в NO_FRIENDSHIP или ONE_SIDED остается.\r",
							"    pm.expect(response.friendshipsStatus).to.be.oneOf([\"NO_FRIENDSHIP\", \"ONE_SIDED\"]);\r",
							"\r",
							"    // Дополнительная проверка: если была взаимная подписка, то статус должен стать NO_FRIENDSHIP.\r",
							"    //  Нужна дополнительная информация о начальном статусе.\r",
							"});\r",
							"\r",
							"// 4. Проверяем, что время отписки установлено в недавнее время.\r",
							"pm.test(\"Время отписки недавнее\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const unsubscribeTime = new Date(response.unsubscribeTime).getTime();\r",
							"    const now = Date.now();\r",
							"    pm.expect(now - unsubscribeTime).to.be.below(5000); // 5 секунд\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/subscriptions",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"subscriptions"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async addComment(userId, eventId, comment, verbose=null) {\r",
					"        return this.post(`/users/${userId}/comments?eventId=${eventId}`, comment, \"Ошибка при добавлении комментария: \", verbose);\r",
					"    }\r",
					"    \r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getComment() {\r",
					"        return {\r",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}') + \" \" + this.getWord(5)\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "usersCount",
			"value": "1",
			"type": "string"
		},
		{
			"key": "catid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "mail",
			"value": "",
			"type": "string"
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "catname",
			"value": "",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "compid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "toCheck",
			"value": "",
			"type": "string"
		},
		{
			"key": "newDataToSet",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "reqid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "catId",
			"value": "",
			"type": "string"
		},
		{
			"key": "confirmedRequests",
			"value": "",
			"type": "string"
		},
		{
			"key": "responseArr",
			"value": "",
			"type": "string"
		},
		{
			"key": "source1",
			"value": "",
			"type": "string"
		},
		{
			"key": "source2",
			"value": "",
			"type": "string"
		},
		{
			"key": "fromId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "source",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1"
		},
		{
			"key": "followerId",
			"value": "",
			"disabled": true
		},
		{
			"value": "",
			"disabled": true
		}
	]
}